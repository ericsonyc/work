.ORIG x3000

LD R1, LEFT
LD R2,RIGHT
DIVISION:

AND     R3, R3, 0   ; Zero out R3 /This is the remainder
AND R4, R4, 0   ; Zero out R4 /This is the quotient

NOT     R3, R2      ; Takes the inverse of 2nd input ->R3
ADD     R3, R3 #1   ; Add one to the inverse (for 2s comp)

LOOPD
ADD     R4, R4, #1  ; Add 1 to R4 repeatedly
ADD     R1, R1, R3  ; Subtract input2 from R1
BRN     NEGATIVE
BRZ     ZERO
BRP     LOOPD

NEGATIVE
ADD     R4, R4, #-1
ADD     R3, R1, R2

; Done with divison algorithm.
ZERO
LD  R0, DECCONV     ; Load Decimal converter
ADD     R3, R3, R0  ; Convert back to ASCII
ADD     R4, R4, R0  ; Convert back to ASCII

ST  R3, REMRESULT   ; Store the remainder result
ST  R4, DIVRESULT   ; Store the division result.

LD  R0, DIVRESULT   ; Load Division result into R0
PUTC            ; Print it.
LEA     R0, DIVSTRING   ; Load the string for division.
PUTS            ; Print the string.

LD  R0, REMRESULT   ; Load Remainder result into R0
PUTC            ; Print it.
LEA     R0, REMSTRING   ; Load the string for remainder
PUTS            ; Print the string.

DECCONV .FILL x30
REMRESULT .FILL #0
DIVRESULT .FILL #0
DIVSTRING .STRINGZ "---------\n"
REMSTRING   .STRINGZ "*********\n"
LEFT .FILL #10
RIGHT .FILL #2
.END



.ORIG x3000
INPUT LEA R0,MESSAGE
      PUTS
      AND R0,R0,#0
      AND R1,R1,#0
      AND R6,R6,#0  ;preserve the address of memoryspace
      AND R3,R3,#0  ;preserve the number of digits
      LEA R6,MEMORYSPACE
      ADD R1,R6,#0
LOOP
      GETC
      ST R0,COUNT
      OUT

      LD R7,COUNT
      LD R2,NEWLINE
      ADD R7,R7,R2
      BRz OUTPUT
      STR R0,R1,#0
      ADD R1,R1,#1
      ADD R3,R3,#1
      ST R3,NUMBER
      ;AND R4,R4,#0
      ;ADD R4,R4,R1 ;preserve the single digit
      BR LOOP

OUTPUT
      ;AND R0,R0,#0
      ;ADD R0,R0,R6
      ;PUTS
      LD R7,DIGIT
      ADD R7,R7,R3
      BRp INPUT
      ADD R3,R3,#-1
      BRz SINGLE
      BR TWO

SINGLE
      ;STR R4,R1,#1;AND R4,R4,#0;STR R4,R1,#0;ADD R1,R1,#1
      LDR R7,R6,#0
      LD R2,TWODIGIT
      ADD R7,R7,R2
      BRn INPUT
      BR SINCAL

TWO ;judge the input
      AND R1,R1,#0
      ADD R1,R1,R6
      LDR R7,R6,#0
      LD R2,ONEDIGIT
      ADD R7,R7,R2
      BRz EQUAL
      BRp INPUT
EQUAL
      ADD R1,R1,#1
      LDR R7,R1,#0
      LD R2,TWODIGIT
      ADD R7,R7,R2
      BRp INPUT


CALCULATE
      LD R0,CHAR
      LDR R7,R6,#0
      ADD R7,R7,R0
      ;LD R3,NUMBER
      ;ADD R3,R3,#-1
      ;BRz FIBONACCI
      AND R3,R3,#0
      LD R2,BASE
TIMES
      ADD R3,R3,R2
      ADD R7,R7,#-1
      BRp TIMES
      LDR R7,R6,#1
      ADD R7,R7,R0
      ADD R3,R3,R7
      BR FIBONACCI
SINCAL
      LDR R7,R6,#0
      LD R0,CHAR
      ADD R7,R7,R0
      AND R3,R3,#0
      ADD R3,R3,R7

FIBONACCI
      LD R0,LEFT
      OUT
      LD R1,RIGHT
      ADD R2,R0,R1
      ST R1,LEFT
      ST R2,RIGHT
      ADD R3,R3,#-1
      BRp FIBONACCI

EXIT
      HALT
MESSAGE .STRINGZ "Please input a number between 3 and 23 :"
MEMORYSPACE .BLKW 10
COUNT .FILL #0
DIGIT .FILL #-2
NEWLINE .FILL #-10
TWODIGIT .FILL #-51
ONEDIGIT .FILL #-50
BASE .FILL #10
CHAR .FILL #-48
LEFT .FILL #1
RIGHT .FILL #1
NUMBER .FILL #1
.END





.ORIG x3000
INPUT LEA R0,MESSAGE
      PUTS
      AND R0,R0,#0
      AND R1,R1,#0
      AND R6,R6,#0
      AND R2,R2,#0
      AND R3,R3,#0
      LEA R6,MEMORYSPACE ; saves the address of the storage memory block
      ADD R1,R6,#0
LOOP
    GETC               ; input character -> r0
    ST R0,COUNT
    OUT               ; r0 -> console

    LD R7,COUNT
    LD R2,NEWLINE
    ;NOT R2,R2
    ADD R7,R7,R2
    BRz OUTPUT
    STR R0,R1,#0       ; r0 -> ( memory address stored in r1 + 0 )
    ADD R1,R1,#1       ; increments the memory pointer so that it
                       ; always points at the next available block
    ;ADD R3,R3,#-1
    BR LOOP

OUTPUT
    LD R2,MIN
    LDR R7,R6,#0
    ADD R7,R7,R2
    BRn EXIT
    LD R2,MAX
    LDR R7,R6,#0
    ADD R7,R7,R2
    BRp EXIT

    ;BR CALCULATE
    ;AND R0,R0,#0
    ;ADD R0,R6,#0
;CALCULATE
    AND R5,R5,#0
    ;ADD R5,R5,R6
    LDR R5,R6,#0
    AND R1,R1,#0
    LD R2,MASK_COUNT
    NOT R2,R2
    ADD R2,R2,#1
WHILE_LOOP
    ADD R3,R1,R2
    BRz LOOP_END
    LEA R3,BINARY
    ADD R3,R3,R1
    LDR R4,R3,#0
    AND R4,R4,R5
    BRz NO_BIT
    LD R0,ASCII_ONE
    OUT
    ADD R1,R1,#1
    BRnzp WHILE_LOOP
NO_BIT
    LD R0,ASCII_ZERO
    OUT
    ADD R1,R1,#1
    BRnzp WHILE_LOOP
LOOP_END
    LD R0,ENTER
    OUT
    BR INPUT

EXIT
    HALT

BINARY .FILL b0000000000001000
       .FILL b0000000000000100
       .FILL b0000000000000010
       .FILL b0000000000000001
       .FILL b0000000000000000

MESSAGE	.STRINGZ "Please input an integer(0-9):"
MEMORYSPACE .blkw 10 ; declares empty space to store the string
MIN .FILL #-48
MAX .FILL #-57
COUNT .FILL 1
NEWLINE .FILL #-10
ENTER       .FILL   x000A
NUMBER .FILL #0
ASCII_ZERO  .FILL   x0030
ASCII_ONE   .FILL   x0031
MASK_COUNT  .FILL   x04     ; loop limit = 4
    .END


; .ORIG x3000
;LOOP   LEA R0, MESSAGE
;       PUTS
;       GETC
;       PUTC
;       BR LOOP
;MESSAGE .STRINGZ "Please input a integer(0-9):"
;ERROR  .STRINGZ "Wrong Input!\n"
;memorySpace .BLWK 10
;      .END

;	.ORIG	x3000
;	LD R2, TERM
;	LD R3, ASCII
;AGAIN TRAP x23
;	ADD R1,R2,R0
;	BRz EXIT
;	ADD R0,R0,R3
;	TRAP x21
;	BRnzp AGAIN
;TERM	.FILL	xFFC9
;ASCII	.FILL	x0020
;EXIT	TRAP	x25
;	.END

.ORIG	x3000
LEA R2,memorySpace
LD R1,upiLoop
loop
GETC
PUTC
STR	R0,R2,#0
ADD	R2,R2,#1

ADD	R1,R1,#-1
BRz	loop

upiLoop	.FILL 7
memorySpace .blkw 10
.END

.ORIG x3000
  AND R0, R0, #0    ; Clear R0
  AND R1, R1, #0    ; Clear R1
  AND R3, R3, #0    ; Clear R3
  LEA R0, NUM       ; pointer [mem]NUM
  ADD R1, R1, R0    ; Store the pointer address of R0 into R1
  LD R2, ASCII      ; load the ascii offset into R2

FOR_LOOP
  LDR R4, R1, #0    ; load the contents of mem address of R1 into R4
  BRz END_LOOP
  ADD R4, R4, R2    ; Add our number to the ASCII offset
  STR R4, R1, #0    ; Store the new value in R4 into [mem] address R1
  ADD R1, R1, #1    ; move our memory pointer down one
  BRnzp FOR_LOOP    ; loop again until we get an x00 char
END_LOOP

  PUTs              ; print our string starting from [mem]address in R0
HALT                ; Trap x25

ASCII .fill  x30    ; Our ASCII offset
NUM   .fill  x01    ; Our Number to print
      .fill  x02
      .fill  x03
      .fill  x04
.END

.ORIG x3000

    LEA R0, PROMPT
    PUTs                ; TRAP x22
    LD R0, ENTER
    OUT                 ; TRAP x21
    IN                  ; TRAP x23

    AND R5, R5, #0      ; clear R5
    ADD R5, R5, R0      ; Store the user input into R5

    AND R1, R1, #0      ; clear R1, R1 is our loop count
    LD R2, MASK_COUNT   ; load our mask limit into R2
    NOT R2, R2          ; Invert the bits in R2
    ADD R2, R2, #1      ; because of 2's compliment we have
                        ; to add 1 to R2 to get -4
WHILE_LOOP
    ADD R3, R1, R2      ; Adding R1, and R2 to see if they'll
                        ; will equal zero
    BRz LOOP_END        ; If R1+R2=0 then we've looped 4
                        ; times and need to exit

    LEA R3, BINARY      ; load the first memory location
                        ; in our binary mask array
    ADD R3, R3, R1      ; use R1 as our array index and
                        ; add that to the first array location
    LDR R4, R3, #0      ; load the next binary mask into R4

    AND R4, R4, R5      ; AND the user input with the
                        ; binary mask
    BRz NO_BIT
    LD R0, ASCII_ONE
    OUT                 ; TRAP x21
    ADD R1, R1, #1      ; add one to our loop counter
    BRnzp WHILE_LOOP    ; loop again
NO_BIT
    LD R0, ASCII_ZERO
    OUT                 ; TRAP x21

    ADD R1, R1, #1      ; add one to our loop counter
    BRnzp WHILE_LOOP    ; loop again
LOOP_END

    LD R0, ENTER
    OUT                 ; TRAP x21
    HALT                ; TRAP x25

; Binary Maps
BINARY  .FILL   b0000000000001000
        .FILL   b0000000000000100
        .FILL   b0000000000000010
        .FILL   b0000000000000001
        .FILL   b0000000000000000

; Stored Values
ENTER       .FILL   x000A
ASCII_ZERO  .FILL   x0030
ASCII_ONE   .FILL   x0031
MASK_COUNT  .FILL   x04     ; loop limit = 4
PROMPT      .STRINGZ "Enter a number from 0-9"

.END


.ORIG x3000
INPUT LEA R0,MESSAGE
      PUTS
      AND R0,R0,#0
      AND R1,R1,#0
      AND R6,R6,#0
      AND R2,R2,#0
      AND R3,R3,#0
      LEA R6,MEMORYSPACE ; saves the address of the storage memory block
      ADD R1,R6,#0
LOOP
    GETC               ; input character -> r0
    ST R0,COUNT
    OUT               ; r0 -> console

    LD R7,COUNT
    LD R2,NEWLINE
    ;NOT R2,R2
    ADD R7,R7,R2
    BRz OUTPUT
    STR R0,R1,#0       ; r0 -> ( memory address stored in r1 + 0 )
    ADD R1,R1,#1       ; increments the memory pointer so that it
                       ; always points at the next available block
    ;ADD R3,R3,#-1
    BR LOOP

OUTPUT
    LD R2,MIN
    LDR R7,R6,#0
    ADD R7,R7,R2
    BRn EXIT
    LD R2,MAX
    LDR R7,R6,#0
    ADD R7,R7,R2
    BRp EXIT

    ;BR CALCULATE
    ;AND R0,R0,#0
    ;ADD R0,R6,#0
;CALCULATE
    AND R5,R5,#0
    ;ADD R5,R5,R6
    LDR R5,R6,#0
    AND R1,R1,#0
    LD R2,MASK_COUNT
    NOT R2,R2
    ADD R2,R2,#1
WHILE_LOOP
    ADD R3,R1,R2
    BRz LOOP_END
    LEA R3,BINARY
    ADD R3,R3,R1
    LDR R4,R3,#0
    AND R4,R4,R5
    BRz NO_BIT
    LD R0,ASCII_ONE
    OUT
    ADD R1,R1,#1
    BRnzp WHILE_LOOP
NO_BIT
    LD R0,ASCII_ZERO
    OUT
    ADD R1,R1,#1
    BRnzp WHILE_LOOP
LOOP_END
    LD R0,ENTER
    OUT
    BR INPUT

EXIT
    HALT

BINARY .FILL b0000000000001000
       .FILL b0000000000000100
       .FILL b0000000000000010
       .FILL b0000000000000001
       .FILL b0000000000000000

MESSAGE	.STRINGZ "Please input an integer(0-9):"
MEMORYSPACE .blkw 10 ; declares empty space to store the string
MIN .FILL #-48
MAX .FILL #-57
COUNT .FILL 1
NEWLINE .FILL #-10
ENTER       .FILL   x000A
NUMBER .FILL #0
ASCII_ZERO  .FILL   x0030
ASCII_ONE   .FILL   x0031
MASK_COUNT  .FILL   x04     ; loop limit = 4
    .END
